{
  "Import React": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "imr",
    "body": [
      "import React from 'react'"
    ],
    "description": "Import React statement"
  },
  "React Function Component with export const": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "rc",
    "body": [
      "export const ${1:Component} = () => {",
      "",
      "  ${2}  ",
      "",
      "  return (",
      "    <></>",
      "  )",
      "}"
    ],
    "description": "React Function Component with export const"
  },
  "React Function Component with typescript props": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "rct",
    "body": [
      "interface Props {",
      "  ",
      "}",
      "",
      "export const ${1:Component} = ({} : Props) => {",
      "",
      "  ${2}  ",
      "",
      "  return (",
      "    <></>",
      "  )",
      "}"
    ],
    "description": "React Function Component with export const with typescript props"
  },
  "useState Hook": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ush",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState($2);"
    ],
    "description": "React useState hook with auto-capitalized setter"
  },
  "useEffect Hook": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ueh",
    "body": [
      "useEffect(() => {",
      "\t$1",
      "}, []);"
    ],
    "description": "React useEffect hook with dependencies array"
  },
  "useCallback Hook": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "uch",
    "body": [
      "useCallback(() => {",
      "\t$1",
      "}, []);"
    ],
    "description": "React useCallback hook with dependencies array"
  },
  "useMemo Hook": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "umh",
    "body": [
      "useMemo(() => {",
      "\t$1",
      "}, []);"
    ],
    "description": "React useMemo hook with dependencies array"
  },
  "useRef Hook": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "urh",
    "body": [
      "const ${1:ref} = useRef();"
    ],
    "description": "React useRef hook with initial value"
  },
  "Ternary Operator": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "tern",
    "body": [
      "${1:condition} ? ${2:true} : ${3:false}"
    ],
    "description": "Ternary operator shorthand"
  },
  "Loading useState hook": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ushLoad",
    "body": [
      "const [loading, setLoading] = useState(false);"
    ],
    "description": "Generic loading boolean useState hook"
  },
  "useImperativeHandle Hook": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "uihh",
    "body": [
      "useImperativeHandle(ref, () => {",
      "\treturn {",
      "\t\t$1",
      "\t};",
      "}, []);"
    ],
    "description": "React useImperativeHandle hook with ref and dependencies array"
  }
}
